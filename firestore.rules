rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is owner of document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Helper function to check if user is a family member
    function isFamilyMember(familyId) {
      return isAuthenticated() && 
             request.auth.uid in get(/databases/$(database)/documents/families/$(familyId)).data.memberUserIds;
    }
    
    // Users collection - users can read/write their own data
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
      
      // User subcollections (data, credentials, etc.)
      match /data/{document=**} {
        allow read, write: if isOwner(userId);
      }
    }
    
    // Families collection
    match /families/{familyId} {
      // Anyone authenticated can create a family
      allow create: if isAuthenticated();
      
      // Anyone authenticated can read families (needed for invite code lookup)
      // Security is maintained because users can only join via valid invite codes
      allow read: if isAuthenticated();
      
      // Family admins can update the family
      // OR allow adding yourself as a member via arrayUnion (for joining via invite)
      allow update: if isAuthenticated() && 
                       (request.auth.uid in resource.data.adminUserIds ||
                        request.auth.uid in get(/databases/$(database)/documents/families/$(familyId)).data.adminUserIds ||
                        (request.auth.uid in request.resource.data.memberUserIds && 
                         !(request.auth.uid in resource.data.memberUserIds)));
      
      // Family admins can delete the family
      allow delete: if isAuthenticated() && 
                       (request.auth.uid in resource.data.adminUserIds ||
                        request.auth.uid in get(/databases/$(database)/documents/families/$(familyId)).data.adminUserIds);
      
      // Family-level memories (shared across family)
      match /memories/{document=**} {
        allow read, write: if isFamilyMember(familyId);
      }
      
      // Family members subcollection
      match /members/{userId} {
        // User can read/write their own member document
        allow read, write: if isOwner(userId);
        
        // Other family members can read this member document
        allow read: if isFamilyMember(familyId);
        
        // User's calendars
        match /calendars/{calendarSource}/events/{eventId} {
          // User can manage their own calendar events
          allow read, write: if isOwner(userId);
          
          // Family members can read each other's events (for family calendar view)
          allow read: if isFamilyMember(familyId);
        }
        
        // User's calendar metadata (sync info, etc.)
        match /calendars/{calendarSource}/metadata/{document=**} {
          // Only the user can access their calendar metadata
          allow read, write: if isOwner(userId);
        }
        
        // User-personal memories (private to user)
        match /memories/{document=**} {
          // Only the user can access their personal memories
          allow read, write: if isOwner(userId);
        }
        
        // User's tasks (private to user)
        match /tasks/{taskId} {
          // Only the user can access their own tasks
          allow read, write: if isOwner(userId);
        }
      }
    }
    
    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
