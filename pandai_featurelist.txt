1. webapp for iphone
2. google + outlook integration - make it 2 way integration. when creating the events in outlook/google it should contain a ✨emoticon to understand it came from cal_ai
3. whatsapp/other messeneger communication with the cal_ai agent
4. better TODO management - faster + easier + auto AI categorization with manual drag drop
5. insert kids school lessons schedule
6. child categories: חוגים, ביהס, חברים/ות, משפחה, אבא, אמא, סבא, סבתא
7. household recommendations: like when to do laundry, plan meals, buy groceries, clean house, cars, 
8. mystuff integration
9. upload app to the cloud - make it use gemini API 
10.add google sign in for users + database to save all user details including memory, events, TODOs
11. חגי ישראל צריכים להופיע + מתי יש חופשים בגני עירייה ומתי יש חופש בביהס
12. סוף שבוע צריך להיות בצבע אחר
13. תמיכה ב
14. iPhone application
15. WhatsApp integration - לקרוא הודעות מקבוצות נבחרות ולהבין אם יש שם משהו שצריך לפעול לגביו ושצריך להיכנס ללוז - אם כן להודיע
16. gemini integration 
17. add dark mode - that actually looks good - very similiar to outlook and teams calendar
18. chat between al the family members (like inner WhatsApp)
19. log tab - history view of what was created/updated and by who, show it nicely with the widgets.
20. move all memory, events, family members (users), logs - actions, everything should be objects in the cloud storage. 
21. defaults for who gets to see the content of my events and my memory. each family member can only access its own user memory. and the family memory. children cannot see their parents calendar. parents can see each other calendar. this should be modifiable in settings. 
22. improve RTL support - in RTL the days should be from right to left and in Hebrew. 
23. improved dark mode with good black color scheme that looks good al over the app


MVP:
1. well working mobile app
2. ability to speak with the app in voice not just chat
3. 




Get Started
Below are example code snippets for a few use cases. For additional information about Azure OpenAI SDK, see full documentation  and samples .

1. Authentication using API Key
For OpenAI API Endpoints, deploy the Model to generate the endpoint URL and an API key to authenticate against the service. In this sample endpoint and key are strings holding the endpoint URL and the API Key.

The API endpoint URL and API key can be found on the Deployments + Endpoint page once the model is deployed.

To create a client with the OpenAI SDK using an API key, initialize the client by passing your API key to the SDK's configuration. This allows you to authenticate and interact with OpenAI's services seamlessly:

import os
from openai import AzureOpenAI

client = AzureOpenAI(
    api_version="2024-12-01-preview",
    azure_endpoint="https://noney-m902do9m-eastus.cognitiveservices.azure.com/",
    api_key=subscription_key
)

2. Install dependencies
Install the Azure Open AI SDK using pip (Requires: Python >=3.8):

pip install openai

3. Run a basic code sample
This sample demonstrates a basic call to the chat completion API. The call is synchronous.

import os
from openai import AzureOpenAI

endpoint = "https://noney-m902do9m-eastus.cognitiveservices.azure.com/"
model_name = "gpt-5-mini"
deployment = "gpt-5-mini"

subscription_key = "<your-api-key>"
api_version = "2024-12-01-preview"

client = AzureOpenAI(
    api_version=api_version,
    azure_endpoint=endpoint,
    api_key=subscription_key,
)

response = client.chat.completions.create(
    messages=[
        {
            "role": "system",
            "content": "You are a helpful assistant.",
        },
        {
            "role": "user",
            "content": "I am going to Paris, what should I see?",
        }
    ],
    max_completion_tokens=16384,
    model=deployment
)

print(response.choices[0].message.content)

4. Explore more samples
Run a multi-turn conversation
This sample demonstrates a multi-turn conversation with the chat completion API. When using the model for a chat application, you'll need to manage the history of that conversation and send the latest messages to the model.

import os
from openai import AzureOpenAI

endpoint = "https://noney-m902do9m-eastus.cognitiveservices.azure.com/"
model_name = "gpt-5-mini"
deployment = "gpt-5-mini"

subscription_key = "<your-api-key>"
api_version = "2024-12-01-preview"

client = AzureOpenAI(
    api_version=api_version,
    azure_endpoint=endpoint,
    api_key=subscription_key,
)

response = client.chat.completions.create(
    messages=[
        {
            "role": "system",
            "content": "You are a helpful assistant.",
        },
        {
            "role": "user",
            "content": "I am going to Paris, what should I see?",
        },
        {
            "role": "assistant",
            "content": "Paris, the capital of France, is known for its stunning architecture, art museums, historical landmarks, and romantic atmosphere. Here are some of the top attractions to see in Paris:\n\n1. The Eiffel Tower: The iconic Eiffel Tower is one of the most recognizable landmarks in the world and offers breathtaking views of the city.\n2. The Louvre Museum: The Louvre is one of the worlds largest and most famous museums, housing an impressive collection of art and artifacts, including the Mona Lisa.\n3. Notre-Dame Cathedral: This beautiful cathedral is one of the most famous landmarks in Paris and is known for its Gothic architecture and stunning stained glass windows.\n\nThese are just a few of the many attractions that Paris has to offer. With so much to see and do, its no wonder that Paris is one of the most popular tourist destinations in the world.",
        },
        {
            "role": "user",
            "content": "What is so great about #1?",
        }
    ],
    max_completion_tokens=16384,
    model=deployment
)

print(response.choices[0].message.content)